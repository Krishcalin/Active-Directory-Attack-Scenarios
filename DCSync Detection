<#
.SYNOPSIS
  Detects potential DCSync attacks by checking for unauthorized AD replication events.

.DESCRIPTION
  This script connects to all Domain Controllers, queries the security event logs for
  Event ID 4662 (Directory Service Access), and filters for replication rights GUIDs.
  It flags events where the replication request comes from a machine that is not a
  member of the Domain Controllers group.

.NOTES
  - Requires Advanced Auditing to be enabled for "Directory Service Access".
  - Must be run with elevated privileges from a domain-joined machine.
#>

# GUIDs for replication rights
$ReplicationRightsGUIDs = @(
    "{1131f6aa-9c07-11d1-f79f-00c04fc2dcd2}", # DS-Replication-Get-Changes
    "{1131f6ad-9c07-11d1-f79f-00c04fc2dcd2}"  # DS-Replication-Get-Changes-All
)

# Get all Domain Controllers and members of the 'Domain Controllers' group
Write-Host "Gathering information on Domain Controllers..."
$DomainControllers = Get-ADDomainController -Filter * | Select-Object -ExpandProperty HostName
$DomainControllerGroupMembers = Get-ADGroupMember -Identity "Domain Controllers" | Select-Object -ExpandProperty Name

Write-Host "Querying event logs on each Domain Controller for DCSync indicators..."
$dcsyncEvents = @()

foreach ($dc in $DomainControllers) {
    try {
        # Query event logs for Event ID 4662
        $events = Get-WinEvent -ComputerName $dc -FilterHashtable @{
            Logname = 'Security'
            ID = 4662
        } -ErrorAction Stop

        foreach ($event in $events) {
            # Convert event to XML for easier property parsing
            $eventXml = [xml]$event.ToXml()
            $subjectName = $eventXml.Event.EventData.Data | Where-Object { $_.Name -eq 'SubjectUserName' } | Select-Object -ExpandProperty '#text'
            $accessMask = $eventXml.Event.EventData.Data | Where-Object { $_.Name -eq 'AccessMask' } | Select-Object -ExpandProperty '#text'
            $properties = $eventXml.Event.EventData.Data | Where-Object { $_.Name -eq 'Properties' } | Select-Object -ExpandProperty '#text'

            # Check for replication rights GUIDs in the event properties and ensure it's not a normal DC
            if ($properties -and $ReplicationRightsGUIDs.Contains($properties) -and ($subjectName -notlike "*$")) {
                # Add suspicious event to collection
                $dcsyncEvents += [PSCustomObject]@{
                    TimeCreated   = $event.TimeCreated
                    DomainController = $dc
                    SubjectUser   = $subjectName
                    AccessMask    = $accessMask
                    EventData     = $properties
                }
            }
        }
    }
    catch {
        Write-Warning "Could not connect to or query logs on $dc. Error: $_"
    }
}

# Report findings
if ($dcsyncEvents.Count -gt 0) {
    Write-Warning "!!! POTENTIAL DCSync ATTACK DETECTED !!!"
    $dcsyncEvents | Format-Table
    # Add your own logic for alerting, e.g., Send-MailMessage
}
else {
    Write-Host "No DCSync indicators found in recent event logs."
}
